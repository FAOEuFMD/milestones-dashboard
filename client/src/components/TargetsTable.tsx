import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from "@tanstack/react-table";
import {RowData} from "../types/interfaces.ts";
import ProgressChart from "./ProgressChart.tsx";

interface TargetsTableProps {
  data: RowData[];
}

const TargetsTable: React.FC<TargetsTableProps> = ({ data }) => {
  const columns: ColumnDef<RowData, any>[] = [
    {
      accessorKey: "expected_result",
      header: "Expected Result"
    },
    {
      accessorKey: "target_description",
      header: "Target description",
    },
    {
      accessorKey: "indicator",
      header: "Indicator",
    },
    {
      accessorKey: "progress",
      header: "Progress",
      cell: ({row}) => {
        const resultToDate = row.original.result_to_date ?? 0; // check if result to date is null
        const programTarget = row.original.program_target ?? 0;
        return (
          <div>
            <ProgressChart
              result_to_date={resultToDate}
              program_target={programTarget}
            />
          </div>
        );
      },
    },
  ];
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });

  return (
    <table>
      <thead>
        {/* Map through array of header groups (need for grouping by expected result later) */}
        {table.getHeaderGroups().map((headerGroup) =>(
          <tr key={headerGroup.id}>
            {/* Map through the headers in each headerGroup; headerGroup.id and header.id are auto-generated by React Table */}
            {headerGroup.headers.map((header) => (
              <th key={header.id}>
                {/* @ts-expect-error TypeScript is misinterpreting the type of header.column.columnDef.header */}
                {flexRender(header.column.columnDef.header, header.getContext())}
              </th>
            ))}
          </tr>
        ))}
      </thead>
      
      <tbody>
  {table.getRowModel().rows.map((row) => {
  
    return (
      <tr key={row.id}>
        {row.getVisibleCells().map((cell) => (
          <td key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</td>
        ))}
      </tr>
    );
  })}
</tbody>
    </table>
  )
}

export default TargetsTable;